generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
  password String
  name     String?
  surname  String?
  email    String?
}

model Student {
  id          String       @id
  username    String       @unique
  password    String
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  classId     Int
  gradeId     Int
  birthday    DateTime
  schoolId    Int?
  sectionId   Int?
  attendances Attendance[]
  fees        Fee[]
  results     Result[]
  class       Class        @relation(fields: [classId], references: [id])
  grade       Grade        @relation(fields: [gradeId], references: [id])
  parent      Parent       @relation(fields: [parentId], references: [id])
  school      School?      @relation(fields: [schoolId], references: [id])
  section     Section?     @relation(fields: [sectionId], references: [id])
}

model Teacher {
  id        String    @id
  username  String    @unique
  password  String
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  birthday  DateTime
  classes   Class[]
  lessons   Lesson[]
  subjects  Subject[] @relation("SubjectToTeacher")
}

model Parent {
  id        String    @id
  username  String    @unique
  password  String
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model School {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  address   String
  phone     String?
  email     String?
  createdAt DateTime  @default(now())
  classes   Class[]
  grades    Grade[]
  sections  Section[]
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  name     String    @unique // Changed from 'level' to 'name' for better readability
  level    Int       @unique // Keep for sorting purposes
  schoolId Int?
  classes  Class[]
  school   School?   @relation(fields: [schoolId], references: [id])
  students Student[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  gradeId       Int
  schoolId      Int?
  announcements Announcement[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  school        School?        @relation(fields: [schoolId], references: [id])
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  events        Event[]
  lessons       Lesson[]
  sections      Section[]
  students      Student[]
}

model Section {
  id        Int       @id @default(autoincrement())
  name      String
  capacity  Int
  createdAt DateTime  @default(now())
  schoolId  Int
  classId   Int
  class     Class     @relation(fields: [classId], references: [id])
  school    School    @relation(fields: [schoolId], references: [id])
  students  Student[]

  @@unique([classId, name])
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  lessons  Lesson[]
  teachers Teacher[] @relation("SubjectToTeacher")
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subjectId   Int
  classId     Int
  teacherId   String
  assignments Assignment[]
  attendances Attendance[]
  exams       Exam[]
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  assignmentId Int?
  studentId    String
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Fee {
  id        Int       @id @default(autoincrement())
  studentId String
  amount    Float
  dueDate   DateTime
  status    FeeStatus @default(PAID)
  createdAt DateTime  @default(now())
  student   Student   @relation(fields: [studentId], references: [id])
  invoices  Invoice[]
}

model Invoice {
  id       Int       @id @default(autoincrement())
  feeId    Int
  amount   Float
  issuedAt DateTime  @default(now())
  paidAt   DateTime?
  fee      Fee       @relation(fields: [feeId], references: [id])
  payments Payment[]
}

model Payment {
  id          Int      @id @default(autoincrement())
  invoiceId   Int
  amount      Float
  paymentDate DateTime @default(now())
  method      String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
}

model Session {
  id         String   @id @default(cuid())
  userId     String
  userType   UserType
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  lastActive DateTime @default(now())
  ipAddress  String?
  userAgent  String?
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  userType  UserType
  action    String
  entity    String
  entityId  String?
  changes   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

model UserPreferences {
  id                 String   @id @default(cuid())
  userId             String   @unique
  userType           UserType
  theme              String   @default("light")
  language           String   @default("en")
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  twoFactorEnabled   Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Message {
  id          String              @id @default(cuid())
  senderId    String
  senderType  UserType
  senderName  String
  content     String
  subject     String?
  messageType MessageType         @default(DIRECT)
  priority    MessagePriority     @default(NORMAL)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  threadId    String?
  parentId    String?
  parent      Message?            @relation("MessageReplies", fields: [parentId], references: [id])
  replies     Message[]           @relation("MessageReplies")
  thread      MessageThread?      @relation(fields: [threadId], references: [id])
  attachments MessageAttachment[]
  recipients  MessageRecipient[]
}

model MessageRecipient {
  id        String    @id @default(cuid())
  messageId String
  userId    String
  userType  UserType
  userName  String
  readAt    DateTime?
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model MessageThread {
  id        String    @id @default(cuid())
  subject   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  messages  Message[]
}

model MessageAttachment {
  id         String   @id @default(cuid())
  messageId  String
  fileName   String
  fileUrl    String
  fileSize   Int
  mimeType   String
  uploadedAt DateTime @default(now())
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model MessageDraft {
  id         String   @id @default(cuid())
  userId     String
  userType   UserType
  content    String
  subject    String?
  recipients Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum FeeStatus {
  PAID
  UNPAID
  OVERDUE
}

enum UserType {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum MessageType {
  DIRECT
  BROADCAST
  ANNOUNCEMENT
  SYSTEM
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
